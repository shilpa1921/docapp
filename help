 ALTER TABLE doctor_info ALTER COLUMN specialization_id SET DATA TYPE INT USING specialization_id::integer;
 ALTER TABLE appointment_history ALTER COLUMN app_date SET DATA TYPE  VARCHAR(255) USING app_date::char;

 import React, { useState } from "react";
import DatePicker from "react-datepicker";
import setHours from "date-fns/setHours";
import setMinutes from "date-fns/setMinutes";
import setSeconds from "date-fns/setSeconds";
import addDays from "date-fns/addDays";
import getDay from "date-fns/getDay";
import moment from "moment";
import axios from "./axios";

function CalenderShow({ id }) {
    const [startDate, setStartDate] = useState(new Date());
    const [myName, setMyName] = useState();

    // setHours(setMinutes(new Date(), new Date().getMinutes()),new Date().getHours())
    const holidays = [new Date("2020-05-26"), new Date("2020-06-03")];
    const timeSlotResponse = [];

    const excludeSlot = [];
    const isWeekday = (date) => {
        const day = getDay(date);
        return day !== 0 && day !== 6;
        const timeslot = [];
    };

    // console.log(startDate);
    // console.log(startDate.getTime());
    var slotString = "";

    const setMyParam = (date) => {
        console.log("inside setMYParam ", date);

        setStartDate(date);
        var onSelectDate = date;
        var classDate = new Date(onSelectDate);
        var doctor_id = id;
        const selectedDate = moment(classDate).format("YYYY-MM-DD");
        var setHourAndMinute = "";
        axios
            .post("/get-timesloat", {
                selectedDate: selectedDate,
                doctor_id: doctor_id,
            })
            .then((res) => {
                console.log("response in get-timesloat", res.data);
                timeSlotResponse.push(res.data);
                for (var i = 0; i < timeSlotResponse[0].length; i++) {
                    console.log(
                        "slotHour2222",
                        timeSlotResponse[0][i].app_timeslot
                    );
                    var slotHour = timeSlotResponse[0][i].app_timeslot.slice(
                        0,
                        2
                    );
                    var slotMinute = timeSlotResponse[0][i].app_timeslot.slice(
                        3,
                        5
                    );
                    console.log("slothour", slotHour);
                    console.log("slotMinute", slotMinute);

                    slotString =
                        slotString +
                        "setHours(setMinutes(new Date()," +
                        `${slotMinute}` +
                        ")," +
                        `${slotHour}` +
                        "),";
                }
                // console.log("slotString", slotString);
                // excludeSlot.push(slotString);
                excludeSlot.push(
                    setHours(
                        setMinutes(setSeconds(new Date(), 0), slotMinute),
                        slotHour
                    )
                );
                var tempName = excludeSlot;
                setMyName(excludeSlot);

                return tempName;
            });
        // .then((tempName) => {
        //     console.log("myName== ", tempName);
        //     setMyName(tempName);

        //     console.log("excludeslot[0] ", myName[0]);
        //     console.log("excludeslotShi ", String(tempName));
        //     console.log("excludeslotShi ", JSON.stringify(tempName));

        // });
        console.log("myName222== ", myName[0]);
    };

    const confirmAppointment = () => {
        console.log("this.props.match in picker", id);
        console.log("in appointment histroy", startDate);
        var doc_id = id;

        const appDate = moment(startDate).format("YYYY-MM-DD");
        const appTime = moment(startDate).format("HH:mm");
        console.log("in appointment histroy date n time ", appDate, appTime);
        axios
            .post("/appointment-histroy", {
                appDate: appDate,
                appTime: appTime,
                doc_id: doc_id,
            })
            .then((res) => {
                console.log("response in appointment histroy", res);
            });
    };

    // var tone = setHours(setMinutes(new Date(), 30), 12);
    // var ttwo = setHours(setMinutes(new Date(), 00), 12);

    var paramTemp = [setHours(setMinutes(setSeconds(new Date(), 0), 30), 12)];

    return (
        <div className="App">
            <header className="App-header">
                <DatePicker
                    selected={startDate}
                    // onChange={(date) => setStartDate(date)}
                    onChange={(date) => setMyParam(date)}
                    showTimeSelect
                    timeFormat="HH:mm"
                    timeIntervals={30}
                    timeCaption="Time"
                    minDate={new Date()}
                    maxDate={addDays(new Date(), 90)}
                    minTime={setHours(setMinutes(new Date(), 0), 9)}
                    maxTime={setHours(setMinutes(new Date(), 0), 20)}
                    excludeDates={holidays}
                    filterDate={isWeekday}
                    excludeTimes={paramTemp}
                    dateFormat="MMMM d, yyyy h:mm aa"
                    // placeholderText="Select a date between today and 5 days in the future"
                    withPortal
                />
                <button onClick={confirmAppointment}>
                    Confirm appointment
                </button>
            </header>
        </div>
    );
}

export default CalenderShow;


 db.getEmailId(pat_id).then((result) => {
                console.log("result in get Email id", result);
            });

              <p>
                        <strong>Dist:</strong>
                        {street} {house_no}
                        <br></br>
                        {city} {pincode}
                    </p>